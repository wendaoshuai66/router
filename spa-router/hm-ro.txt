<div class="a1"> <h1>介绍</h1> </div> <div class="a2"> <p><strong>Vue.js 是什么</strong></p> <p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。<br /> 如果你已经是有经验的前端开发者，想知道 Vue 与其它库/框架有哪些区别，请查看对比其它框架。</p> </div> <div class="a3"> <p><strong>起步</strong></p> <p>尝试 Vue.js 最简单的方法是使用 JSFiddle 上的 Hello World 例子。你可以在浏览器新标签页中打开它，跟着例子学习一些基础用法。或者你也可以创建一个 .html 文件，然后通过如</p> </div> <div class="a4"> <p><strong>声明式渲染</strong></p> <pre><code class="lang-">declare type RouteConfig = { path: string; component?: Component; name?: string; // 命名路由 components?: { [name: string]: Component }; // 命名视图组件 redirect?: string | Location | Function; props?: boolean | string | Function; alias?: string | Array&lt;string&gt;; children?: Array&lt;RouteConfig&gt;; // 嵌套路由 beforeEnter?: (to: Route, from: Route, next: Function) =&gt; void; meta?: any; // 2.6.0+ caseSensitive?: boolean; // 匹配规则是否大小写敏感？(默认值：false) pathToRegexpOptions?: Object; // 编译正则的选项 } </code></pre> </div> <div class="a5"> <h1>Vue 实例</h1> </div> <div class="a6"> <p><strong>创建一个 Vue 的实例</strong></p> <p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p> </div> <div class="a7"> <p><strong>数据与方法</strong></p> <p>当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。</p> <pre><code class="lang-">// 我们的数据对象 var data = { a: 1 } // 该对象被加入到一个 Vue 实例中 var vm = new Vue({ data: data }) // 它们引用相同的对象！ vm.a === data.a // =&gt; true // 设置属性也会影响到原始数据 vm.a = 2 data.a // =&gt; 2 // ……反之亦然 data.a = 3 vm.a // =&gt; 3 </code></pre> </div> <div class="a8"> <h1>模板语法</h1> </div> <div class="a9"> <p><strong>插值</strong></p> <p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p> </div> <div class="a10"> <p><strong>文本</strong></p> <p>当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。</p> <pre><code class="lang-">// 我们的数据对象 var data = { a: 1 } // 该对象被加入到一个 Vue 实例中 var vm = new Vue({ data: data }) // 它们引用相同的对象！ vm.a === data.a // =&gt; true // 设置属性也会影响到原始数据 vm.a = 2 data.a // =&gt; 2 // ……反之亦然 data.a = 3 vm.a // =&gt; 3 </code></pre> </div> <div class="a11"> <p><strong>原始 HTML</strong></p> <p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p> </div>